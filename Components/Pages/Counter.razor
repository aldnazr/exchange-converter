@page "/counter"

<PageTitle>Home</PageTitle>

<div class="container mt-4">
    <h1>Hello, world!</h1>

    <p>Welcome to your new app.</p>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">AlertDialog Examples</h5>
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" @onclick="ShowSimpleAlert">
                            Show Simple Alert
                        </button>

                        <button class="btn btn-warning" @onclick="ShowHtmlAlert">
                            Show HTML Alert
                        </button>

                        <button class="btn btn-danger" @onclick="ShowComplexAlert">
                            Show Complex HTML Alert
                        </button>

                        <button class="btn btn-info" @onclick="ShowListAlert">
                            Show List Alert
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(lastAction))
    {
        <div class="alert alert-info mt-3" role="alert">
            <strong>Last Action:</strong> @lastAction
        </div>
    }
</div>

<!-- AlertDialog Component -->
<AlertDialog @ref="alertDialog" Title="@dialogTitle" OnConfirm="HandleConfirm" OnCancel="HandleCancel">
    <Message>
        @messageContent
    </Message>
</AlertDialog>

@code {
    private AlertDialog? alertDialog;
    private string dialogTitle = "";
    private RenderFragment? messageContent;
    private string lastAction = "";

    private void ShowSimpleAlert()
    {
        dialogTitle = "Simple Alert";
        messageContent = @<div>
            <p>This is a simple text message.</p>
        </div>;

        alertDialog?.Show();
    }

    private void ShowHtmlAlert()
    {
        dialogTitle = "HTML Alert";
        messageContent = @<div>
            <div class="alert alert-warning">
                <i class="bi bi-exclamation-triangle-fill"></i>
                <strong>Warning!</strong> This action cannot be undone.
            </div>
            <p>Are you sure you want to <strong>delete</strong> this item?</p>
            <small class="text-muted">This will permanently remove the data from the system.</small>
        </div>;

        alertDialog?.Show();
    }

    private void ShowComplexAlert()
    {
        dialogTitle = "Complex HTML Alert";
        messageContent = @<div>
            <div class="row">
                <div class="col-2">
                    <i class="bi bi-person-circle" style="font-size: 2rem; color: #0d6efd;"></i>
                </div>
                <div class="col-10">
                    <h6 class="mb-1">User Information</h6>
                    <p class="mb-1"><strong>Name:</strong> John Doe</p>
                    <p class="mb-1"><strong>Email:</strong> john.doe@example.com</p>
                    <p class="mb-0"><strong>Role:</strong> <span class="badge bg-success">Administrator</span></p>
                </div>
            </div>
            <hr>
            <div class="text-center">
                <small class="text-muted">Do you want to proceed with this action?</small>
            </div>
        </div>;

        alertDialog?.Show();
    }

    private void ShowListAlert()
    {
        var items = new List<string> { "Item 1", "Item 2", "Item 3", "Item 4" };

        dialogTitle = "Items to Process";
        messageContent = @<div>
            <p>The following items will be processed:</p>
            <ul class="list-group">
                @foreach (var item in items)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @item
                        <span class="badge bg-primary rounded-pill">Ready</span>
                    </li>
                }
            </ul>
            <div class="mt-3">
                <div class="progress">
                    <div class="progress-bar" role="progressbar" style="width: 75%" aria-valuenow="75" aria-valuemin="0"
                        aria-valuemax="100">75%</div>
                </div>
                <small class="text-muted">Processing progress</small>
            </div>
        </div>;

        alertDialog?.Show();
    }

    private async Task HandleConfirm()
    {
        lastAction = $"Confirmed at {DateTime.Now:HH:mm:ss}";
        await Task.Delay(100); // Simulate async operation
    }

    private async Task HandleCancel()
    {
        lastAction = $"Cancelled at {DateTime.Now:HH:mm:ss}";
        await Task.Delay(100); // Simulate async operation
    }
}